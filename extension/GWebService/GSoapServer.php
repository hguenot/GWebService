<?php

include_once(dirname(__FILE__).DIRECTORY_SEPARATOR.implode(DIRECTORY_SEPARATOR, array('nusoap', 'nusoap.php')));

/**
 * Class GSoapServer encapsulates Soap Server for providing a WSDL based WebService.
 * It is based on {@link http://sourceforge.net/projects/nusoap/ nusoap}.
 *
 * GSoapServer makes use of {@link GWsdlGenerator} for generating the WSDL on-the-fly using doc comment blocks
 * of the service provider class.
 *
 * Call {@link generateWsdl} to retrieve the generated WSDL or {@link run} to process the web service requests
 * (call appropriate method in provider class).
 *
 * Some remarks: <ul>
 * <li><em>Due to nusoap restriction, if {@link provider} is a class name, the corresponding class need to
 * declare an empty constructor.</em></li>
 * <li><em>The included release of nusoap was amended for our specific needs : add a provider attribute used to
 * call SOAP methods (instead of creating a new object using class name - which overcomes the above limitation).</em></li>
 * </ul>
 *
 * @author HG Development
 * @package webservice
 * @copyright Copyright &copy; 2012 HG Development
 * @license GNU LESSER GPL 3
 * @version $Id: $
*/
class GSoapServer extends CComponent {

	private $_server;
	private $_wsdl;

	/**
	 * @var string|object Provider class or object which is called for SOAP method interception.
	 */
	public $provider;

	/**
	 * @var string URL used by SOAP client to request SOAP method execution.
	 */
	public $serviceUrl;

	/**
	 * @var string encoding of the Web service. Defaults to 'UTF-8'.
	 */
	public $encoding='ISO-8859-1';

	/**
	 * Renders the WSDL generated by {@link GWsdlGenerator}.
	 */
	public function renderWsdl() {
		$this->init();
		$wsdl=$this->getWsdl()->serialize(0);
		header('Content-Type: text/xml;charset='.$this->encoding);
		header('Content-Length: '.(function_exists('mb_strlen') ? mb_strlen($wsdl,'8bit') : strlen($wsdl)));
		echo $wsdl;
	}

	/**
	 * Returns the current wsdl nusoap object.
	 *
	 * @return mixed Wsdl nusoap object.
	 */
	public function getWsdl() {
		$this->init();
		return $this->_wsdl;
	}

	/**
	 * Initialize nusoap server, {@link GWsdlGenerator WSDL Generator} and {@link getsWsdl) object.
	 */
	protected function init() {
		if ($this->_server == null) {
			$this->_server = new nusoap_server();
			$classname = $this->provider;
			if (is_object($this->provider)) {
				$this->_server->provider = $this->provider;
				$classname = get_class ($this->provider);
			}
				
			$wsdlGenerator = new GWsdlGenerator();
			$wsdlGenerator->generateWsdl($classname, $this->_server, $this->serviceUrl);
			$this->_wsdl = $this->_server->wsdl;
		}
	}

	/**
	 * Handles the web service request.
	 */
	public function run()
	{
		Yii::app()->onError = array($this, 'handleError');
		Yii::app()->onException = array($this, 'handleException');
		$this->init();
		if (!isset($HTTP_RAW_POST_DATA)) {
			if (isset($GLOBALS['HTTP_RAW_POST_DATA']))
				$HTTP_RAW_POST_DATA = $GLOBALS['HTTP_RAW_POST_DATA'];
			else
				$HTTP_RAW_POST_DATA ='';
		}
		Yii::log("WebService call with : " . $HTTP_RAW_POST_DATA, CLogger::LEVEL_TRACE, "GWS.server");
			$this->_server->service($HTTP_RAW_POST_DATA);
			Yii::log($this->_server->getDebug(), CLogger::LEVEL_TRACE, "GWS.server");
	}

	/**
	 * Yii error handler. 
	 * 
	 * @param CErrorEvent $ev
	 */
	public function handleError($ev) {
		if ($error=Yii::app()->errorHandler->error) {
			Yii::log("Error handled : " . $ev->file . ":" . $ev->line . "  " . $ev->message . "\n" .$error['trace'], CLogger::LEVEL_ERROR, "GWS");
		} else {
			Yii::log("Error handled : " . $ev->file . ":" . $ev->line . "  " .$ev->message, CLogger::LEVEL_ERROR, "GWS");
		}
		$this->_server->fault('SOAP-ENV:Client', 'Technical error.', '', $ev->message);
		$this->_server->send_response();
		$ev->handled = true;
	}

	/**
	 * Yii error handler. 
	 * 
	 * @param CErrorEvent $ev
	 */
	public function handleException($ev) {
		if ($error=Yii::app()->errorHandler->error) {
			Yii::log("Error handled : " . $ev->file . ":" . $ev->line . "  " . $ev->message . "\n" .$error['trace'], CLogger::LEVEL_ERROR, "GWS");
		} else {
			Yii::log("Error handled : " . $ev->file . ":" . $ev->line . "  " . $ev->message, CLogger::LEVEL_ERROR, "GWS");
		}
		$this->_server->fault('SOAP-ENV:Client', 'Technical error.', '', $ev->message);
		$this->_server->send_response();
		$ev->handled = true;
	}

}

